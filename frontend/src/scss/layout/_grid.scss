@use "sass:math";
@use "../abstracts/variables" as *;
@use "../abstracts/mixins" as *;

$grid-columns: 12;
$grid-gaps: (
  "0": 0,
  "1": 5px,
  "2": 10px,
  "3": 15px,
  "4": 20px,
  "5": 25px,
  "6": 30px,
);

$layout-values: flex-start, flex-end, center, space-between, space-around;

.container {
  width: 100%;
  // height: auto;
  // padding-left: 0.75rem;
  // padding-right: 0.75rem;
  padding-right: $base-padding * 1.5;
  padding-left: $base-padding * 1.5;
  margin-left: auto;
  margin-right: auto;
}

.f-col {
  display: flex;
  flex-direction: column;
}

.f-row {
  display: flex;
  flex-flow: row wrap;
}

// grid gaps (cant seem to make this work idk)
// tho still prob better to just use native gap
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val !important;
  }
  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
}

// justify content classes
@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}

// col classes
@include xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
